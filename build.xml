<?xml version="1.0" encoding="UTF-8"?>
<project name="RCS_Core" default="help">

	<!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
	<property file="local.properties" />

	<!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
	<property file="ant.properties" />

	<!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
	<property environment="env" />
	<condition property="sdk.dir" value="${env.ANDROID_HOME}">
		<isset property="env.ANDROID_HOME" />
	</condition>

	<!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
	<loadproperties srcFile="project.properties" />

	<!-- quick check on sdk.dir -->
	<fail
			message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
			unless="sdk.dir"
			/>

	<!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
	<import file="custom_rules.xml" optional="true" />
	<property name="android.root" 		value="${env.ANDROID_SDK}"/>
	<property name="terminal.root" 		value="."/>
	<property name="terminal.api" 		value="${terminal.root}/rcs_api.jar"/>
	<property name="terminal.build"		value="${terminal.root}/build"/>
	<property name="src.path" 		value="${terminal.root}/src"/>

	<path id="j2se.lib">
		<fileset dir="${env.JAVA_HOME}/lib/">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<property name="j2se.classpath" refid="j2se.lib"/>

	<path id="terminal.classpath">
		<pathelement path="${j2se.classpath};${android.root}/android.jar;${terminal.build}/classes;${terminal.root}/build/classes"/>
	</path>

	<!-- Generate RCS API JAR -->
	<target name="api">
		<echo>Generate ${terminal.api} file</echo>
		<delete file="${terminal.api}"/>
		<jar destfile="${terminal.api}" basedir="${terminal.root}/bin/classes"
				includesfile="${terminal.root}/jarfiles.txt">
		</jar>
		<copy file="${terminal.api}" todir="${terminal.root}/../RI/libs"/>
		<copy file="${terminal.api}" todir="${terminal.root}/../tests/multistack/libs"/>
		<copy file="${terminal.api}" todir="${terminal.root}/../samples/contacts/libs"/>
		<copy file="${terminal.api}" todir="${terminal.root}/../samples/tts/libs"/>
		<copy file="${terminal.api}" todir="${terminal.root}/../samples/extension/libs"/>
		<copy file="${terminal.api}" todir="${terminal.root}/../samples/session/libs"/>
		<copy file="${terminal.api}" todir="${terminal.root}/../samples/upload/libs"/>
	</target>

	<!-- Merge stack from SVN -->
	<target name="merge">
		<echo>Merge stack from SVN repositiry</echo>
		<copy file="${terminal.api}" todir="${terminal.root}/../ri/libs"/>
	</target>
	<target name="docs" description="Generate RCS API javadoc">
		<echo>Generate Javadoc</echo>
		<delete dir="${terminal.root}/../docs/javadoc"/>
		<mkdir dir="${terminal.root}/../docs/javadoc"/>
		<javadoc doctitle="GSMA RCS Terminal API"
				verbose="on"
				destdir="../docs/javadoc"
				use="true"
				access="public" 
				classpath="${android_jar}:${project.all.jars.path}" 
				sourcepath="${src.path}"
				packagenames="com.gsma.services.rcs.*">
		</javadoc>
	</target>

	<!-- ******************************************************* -->
	<!-- ************************* Help ************************ -->
	<!-- ******************************************************* -->

	<target name="help">
		<echo>Android Ant Build. Available targets:</echo>
		<echo>   help:      Displays this help.</echo>
		<echo>   clean:     Removes output files created by other targets.</echo>
		<echo>              This calls the same target on all dependent projects.</echo>
		<echo>              Use 'ant nodeps clean' to only clean the local project</echo>
		<echo>   debug:     Builds the application and signs it with a debug key.</echo>
		<echo>              The 'nodeps' target can be used to only build the</echo>
		<echo>              current project and ignore the libraries using:</echo>
		<echo>              'ant nodeps debug'</echo>
		<echo>   release:   Builds the application. The generated apk file must be</echo>
		<echo>              signed before it is published.</echo>
		<echo>              The 'nodeps' target can be used to only build the</echo>
		<echo>              current project and ignore the libraries using:</echo>
		<echo>              'ant nodeps release'</echo>
		<echo>   instrument:Builds an instrumented package and signs it with a</echo>
		<echo>              debug key.</echo>
		<echo>   test:      Runs the tests. Project must be a test project and</echo>
		<echo>              must have been built. Typical usage would be:</echo>
		<echo>                  ant [emma] debug install test</echo>
		<echo>   emma:      Transiently enables code coverage for subsequent</echo>
		<echo>              targets.</echo>
		<echo>   install:   Installs the newly build package. Must either be used</echo>
		<echo>              in conjunction with a build target (debug/release/</echo>
		<echo>              instrument) or with the proper suffix indicating</echo>
		<echo>              which package to install (see below).</echo>
		<echo>              If the application was previously installed, the</echo>
		<echo>              application is reinstalled if the signature matches.</echo>
		<echo>   installd:  Installs (only) the debug package.</echo>
		<echo>   installr:  Installs (only) the release package.</echo>
		<echo>   installi:  Installs (only) the instrumented package.</echo>
		<echo>   installt:  Installs (only) the test and tested packages (unless</echo>
		<echo>              nodeps is used as well.</echo>
		<echo>   uninstall: Uninstalls the application from a running emulator or</echo>
		<echo>              device. Also uninstall tested package if applicable</echo>
		<echo>              unless 'nodeps' is used as well.</echo>
		<echo>   api:       Generate Terminal API</echo>
		<echo>   merge:     Copy rcsapi.jar in RI and sample projects</echo>
		<echo>   docs:      Generate javadoc of client terminal API</echo>
	</target>
	<!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
	<!-- version-tag: custom -->
	<import file="${sdk.dir}/tools/ant/build.xml" />
</project>
